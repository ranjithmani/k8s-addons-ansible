name: Deploy Loki Stack with MinIO

on:
  workflow_dispatch:
    inputs:
      kubeconfig:
        description: 'Base64 encoded kubeconfig'
        required: true
      minio_user:
        description: 'MinIO access key'
        required: true
      minio_pass:
        description: 'MinIO secret key'
        required: true
      minio_bucket:
        description: 'MinIO bucket name'
        default: 'loki'
        required: false

env:
  HELM_EXPERIMENTAL_OCI: 1
  LOKI_NAMESPACE: loki
  MINIO_NAMESPACE: minio
  MINIO_ENDPOINT: http://minio.minio.svc.cluster.local:9000

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubernetes tools
        uses: azure/setup-kubectl@v3
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
      
      - name: Configure Kubernetes
        run: |
          mkdir -p ~/.kube
          echo "${{ inputs.kubeconfig }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          kubectl cluster-info

      - name: Add Grafana Helm repo
        run: helm repo add grafana https://grafana.github.io/helm-charts

      - name: Create namespaces
        run: |
          kubectl create namespace $LOKI_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace $MINIO_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy MinIO PVC
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: minio-pvc-claim
            namespace: $MINIO_NAMESPACE
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
            storageClassName: standard
          EOF

      - name: Deploy MinIO
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: minio
            namespace: $MINIO_NAMESPACE
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: minio
            template:
              metadata:
                labels:
                  app: minio
              spec:
                containers:
                - name: minio
                  image: minio/minio:latest
                  command: ["minio", "server", "/data", "--console-address", ":9001"]
                  ports:
                    - containerPort: 9000
                      name: http
                    - containerPort: 9001
                      name: console
                  env:
                  - name: MINIO_ROOT_USER
                    value: "${{ inputs.minio_user }}"
                  - name: MINIO_ROOT_PASSWORD
                    value: "${{ inputs.minio_pass }}"
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "100m"
                    limits:
                      memory: "1Gi"
                      cpu: "500m"
                  readinessProbe:
                    httpGet:
                      path: /minio/health/ready
                      port: http
                    initialDelaySeconds: 10
                    periodSeconds: 5
                  livenessProbe:
                    httpGet:
                      path: /minio/health/live
                      port: http
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  volumeMounts:
                  - name: minio-data
                    mountPath: /data
                volumes:
                  - name: minio-data
                    persistentVolumeClaim:
                      claimName: minio-pvc-claim
          EOF

      - name: Create MinIO Service
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: minio
            namespace: $MINIO_NAMESPACE
          spec:
            selector:
              app: minio
            ports:
              - port: 9000
                targetPort: http
                name: http
              - port: 9001
                targetPort: console
                name: console
          EOF

      - name: Wait for MinIO to be ready
        run: |
          kubectl wait --namespace $MINIO_NAMESPACE \
            --for=condition=ready pod \
            --selector=app=minio \
            --timeout=300s

      - name: Initialize MinIO bucket
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: minio-bucket-init
            namespace: $MINIO_NAMESPACE
          spec:
            template:
              spec:
                containers:
                - name: mc
                  image: minio/mc:latest
                  command:
                    - /bin/sh
                    - -c
                    - |
                      until mc alias set myminio $MINIO_ENDPOINT "${{ inputs.minio_user }}" "${{ inputs.minio_pass }}"; do
                        echo "Waiting for MinIO to be ready..."
                        sleep 5
                      done
                      mc mb myminio/${{ inputs.minio_bucket || 'loki' }} --ignore-existing || true
                      mc policy set readwrite myminio/${{ inputs.minio_bucket || 'loki' }}
                restartPolicy: OnFailure
          EOF

      - name: Deploy Loki Stack
        run: |
          helm upgrade --install loki grafana/loki-stack \
            --namespace $LOKI_NAMESPACE \
            --create-namespace \
            --values loki-custom-values.yaml
