name: build_image_test

on:
  workflow_dispatch:
    inputs:
      k8s_version:
        description: 'Select Kubernetes version'
        required: true
        type: choice
        options:
          - 1.29.5
          - 1.30.5
          - 1.31.5
          - 1.32.5
        default: '1.29.5'
      ubuntu_version:
        description: 'Select the OS Version'
        required: true
        type: choice
        options:
          - 22.04
          - 24.04
        default: '22.04'


jobs:
  build:
    runs-on: self-hosted
    steps:

      - name: Checkout Workflow Repo
        uses: actions/checkout@v4

      - name: Check Ubuntu Version
        run: |
          echo "Ubuntu Version:"
          cat /etc/os-release

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3.10 python3.10-venv python3.10-dev python3-pip \
            make qemu-system-x86 \
            qemu-kvm libvirt-daemon-system libvirt-clients virtinst cpu-checker libguestfs-tools libosinfo-bin
          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
          sudo update-alternatives --set python3 /usr/bin/python3.10
          python3 -m pip install --upgrade pip
          python3 -m pip install --user ansible-core
          echo 'export PATH=$HOME/.local/bin:$PATH' >> ~/.bashrc
          export PATH=$HOME/.local/bin:$PATH
          python3 --version
          ansible --version
          sudo chown $(whoami):$(whoami) /dev/kvm
          sudo chmod 600 /dev/kvm

      - name: Verify KVM and Virtualization Support
        run: |
          echo "Checking if KVM is enabled..."
          kvm-ok || (echo "KVM is not enabled! Check virtualization settings." && exit 1)
          echo "Checking QEMU version..."
          qemu-system-x86_64 --version
          echo "Checking libvirt status..."
          sudo systemctl status libvirtd || echo "libvirtd service is not active"

      - name: Add ~/.local/bin to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build Image
        run: |
          export HOME=~
          export PATH=$HOME/.local/bin:image-builder/images/capi/.local/bin:$PATH
          cd image-builder/images/capi

          # Enable logging for debugging
          # export PACKER_LOG=1
          # make clean
          k8sversion=${{ github.event.inputs.k8s_version }}
          k8sseries=v$(echo $k8sversion |  awk -F\. '{print $1"."$2}')
          k8ssemver=v${k8sversion}
          k8sdebver=${k8sversion}-1.1
          crictlver=$(echo $k8sversion | awk -F\. '{print $1"."$2".0"}')
          export KUBERNETES_SERIES=$k8sseries
          export KUBERNETES_SEMVER=$k8ssemver
          export KUBERNETES_DEB_VERSION=$k8sdebver
          export CRICTL_VERSION=$crictlver

          if [ ${{ github.event.inputs.ubuntu_version }} == '22.04' ]
          then
          make build-raw-ubuntu-2204-efi
          else
          make build-raw-ubuntu-2404-efi
          fi

      - name: Configure minio endpoint
        run: |
          if [ ! -f  /usr/local/bin/mc ]
          then
          sudo curl ${{ secrets.minio_url }}/images/mc --create-dirs -o /usr/local/bin/mc
          sudo chmod +x /usr/local/bin/mc
          mc alias set myminio ${{ secrets.minio_url }} ${{ secrets.minio_user }} ${{ secrets.minio_pass }}
          fi

      - name: Install trivy
        run: |
          if [ ! -f /usr/bin/trivy ]
          then
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt update
          sudo apt install trivy -y
          fi

      - name: Scan the image for vulenarability and upload to minio
        run: |
          cd image-builder/images/capi/output/
          file=$(ls -l | grep ^d|awk '{print $9}')
          mc cp ${file}.gz myminio/images
          cd ${file}
          trivy vm  --format json --output ${file}.json --ignore-unfixed -s HIGH,CRITICAL,MEDIUM  "${file}"
          sleep 20
          mc cp ${file}.json myminio/images
          cd ..
          rm -rf $file ${file}.gz
